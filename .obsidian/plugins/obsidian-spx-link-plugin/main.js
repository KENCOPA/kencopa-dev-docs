'use strict';

var obsidian = require('obsidian');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
const DEFAULT_SETTINGS = {
  vaultName: "",
  spxBaseUrl: "https://spx.vercel.app/1/"
};
class SpxLinkPlugin extends obsidian.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings", DEFAULT_SETTINGS);
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SpxSettingTab(this.app, this));
    this.addCommand({
      id: "copy-spx-link",
      name: "Copy SPX-wrapped Obsidian URL",
      hotkeys: [
        { modifiers: ["Ctrl", "Meta"], key: "c" }
        // Cmd+Ctrl+C
      ],
      callback: async () => {
        const file = this.app.workspace.getActiveFile();
        if (!(file instanceof obsidian.TFile)) {
          new obsidian.Notice("No active note to copy URL from.");
          return;
        }
        if (!this.settings.vaultName) {
          new obsidian.Notice("Please set your Vault name in plugin settings.");
          return;
        }
        const filePath = encodeURIComponent(file.path);
        const uri = `obsidian://open?vault=${encodeURIComponent(
          this.settings.vaultName
        )}&file=${filePath}`;
        try {
          const spxLink = `${this.settings.spxBaseUrl}/${encodeURIComponent(
            uri
          )}`;
          await navigator.clipboard.writeText(spxLink);
          new obsidian.Notice("Copied SPX link to clipboard!");
        } catch (error) {
          new obsidian.Notice("Failed to create SPX link. Please check your settings.");
          console.error(error);
        }
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
}
class SpxSettingTab extends obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    __publicField(this, "plugin");
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "SPX Link Copier Settings" });
    new obsidian.Setting(containerEl).setName("Vault Name").setDesc("Name of your Obsidian vault (case-sensitive)").addText(
      (text) => text.setPlaceholder("MyVault").setValue(this.plugin.settings.vaultName).onChange(async (value) => {
        this.plugin.settings.vaultName = value.trim();
        await this.plugin.saveSettings();
      })
    );
    new obsidian.Setting(containerEl).setName("SPX Base URL").setDesc("Base URL of your SPX proxy (e.g. https://spx.vercel.app)").addText(
      (text) => text.setPlaceholder(DEFAULT_SETTINGS.spxBaseUrl).setValue(this.plugin.settings.spxBaseUrl).onChange(async (value) => {
        this.plugin.settings.spxBaseUrl = value.trim().replace(/\/$/, "");
        await this.plugin.saveSettings();
      })
    );
  }
}

module.exports = SpxLinkPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
